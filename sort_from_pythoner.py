
'''СОРТИРОВКА ПО КЛЮЧАМ'''
# Создать список ключей словаря.
# Отсортировать его.
# В цикле for перебрать элементы списка, используя элемент списка как ключ словаря.

d = {'a': 10, 'b': 15, 'c': 4}
list_keys = list(d.keys())
list_keys.sort()
for i in list_keys:
    print(i, ':', d[i])
print()


'''СОРТИРОВКА ПО ЗНАЧЕНИЯМ'''
# Отсортировать словарь по значениям сложнее, так как обращаться к элементам словаря можно только по ключам.
# Однако можно создать список кортежей ("ключ", "значение") и отсортировать его по вторым элементам пар.
# Далее в программе используется именно данная упорядоченная структура, а не сам оригинальный словарь.

dict = {'a': 10, 'b': 15, 'c': 4}
list_d = list(dict.items())
list_d.sort(key=lambda i: i[1])
for i in list_d:
    print(i[0], ':', i[1])
print()

# Если бы мы использовали метод sort() без параметра key, то сортировка была бы выполнена по первым элементам кортежей.
# В качестве значения для key указывается функция. В данном случае используется lambda-функция, что уменьшает объем кода.
# В функцию передаются кортежи, а возвращаются их вторые элементы, по которым происходит сортировка.

'''Класс OrderedDict модуля collections'''
# В модуле collections имеется класс OrderedDict, который является подклассом класса dict, встроенного в Python словаря.
# OrderedDict позволяет создавать объекты-словари, которые помнят порядок своих элементов.
# Также класс имеет ряд методов, которые могут изменять порядок элементов в словаре.
from collections import OrderedDict
a = OrderedDict({1: 10, 0: 5})
a[2] = 20
a[4] = 40
a[3] = 30

for i in a:
    print(i, ':', a[i])

